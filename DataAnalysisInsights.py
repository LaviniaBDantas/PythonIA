# -*- coding: utf-8 -*-
"""Copy of Encontro_2_TrilhaParaElasIA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1twcnEbnkUw19GN8jPgk51GQ_Dy2INV3e

# Instala Bibliotecas
"""

pip install --upgrade pip

!pip install -U datasets

"""# Importa Bibliotecas"""

#Importa biblioteca para carregar datasets do Hugging face
from datasets import load_dataset
#Importa biblioteca para geração de gráficos
import matplotlib.pyplot as plt
#Importa a biblioteca do pandas
import pandas as pd

"""# 1. Conhecendo dataset"""

#Carrega dataset do Hugging face
ds = load_dataset("ruanchaves/b2w-reviews01")

#Visualiza estrutura do Dataset

# Converter para DataFrame
df = pd.DataFrame(ds['train'])
#Dimensões do dataset (quantidade de registros e variáveis)

#Visualiza as primeiras linhas do dataframe

#Visualiza as ultimas linhas do dataframe

#Visualiza as primeiras e últimas linhas do dataframe

#Visualiza as colunas do dataframe

"""# 2. Distribuição das avaliações"""

df['overall_rating'].value_counts().sort_index().plot(kind='bar')
plt.title('Distribuição das Notas')
plt.xlabel('Nota')
plt.ylabel('Quantidade de Avaliações')

"""# 3. Distribuição proporcional das avaliações"""

#Gera gráfico de pizza. Autopct: é uma string ou função usada para rotular as partes do gráfico com seus valores numéricos
df['overall_rating'].value_counts().sort_index().plot(kind='pie', autopct='%1.1f%%')

"""# 4. Proporção de Recomendação"""

# Contar recomendações para amigo
recommend_counts = df['recommend_to_a_friend'].value_counts()
recommend_counts

plt.figure(figsize=(4, 2))
recommend_counts.plot(kind='pie', autopct='%1.2f%%', colors=['lightgreen', 'lightcoral'])
plt.title('Recomendaria a um Amigo?')

"""# 5. Distribuição por Estado"""

plt.figure(figsize=(6, 4))
df['reviewer_state'].value_counts().head(10).plot(kind='bar', color='blue')

"""# 6.Nuvem de Palavras"""

#Importa biblioteca
from wordcloud import WordCloud

#Extrai somente o texto de avaliações
texts = df['review_text']

#Concatena todos os campos textos em uma string, considerando campos Nulos
full_text = " ".join([str(text) if text is not None else "" for text in texts])

# Cria a word cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(full_text)

# Gera a imagem
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

"""# 7. Gere a nuvem de palavras desconsiderando stopwords"""

#Import a biblioteca Natural Language Tookit
import nltk
#Importa a biblioteca que contem as stopwords
from nltk.corpus import stopwords

# Baixe
#nltk.download('stopwords')

# Pegue a lista de stopwords em português
stopwords_pt = set(stopwords.words('portuguese'))

print(sorted(stopwords_pt))

# Gera word cloud eliminando stopwords
wordcloud = WordCloud(width=800, height=400, background_color='white', stopwords=stopwords_pt).generate(full_text)

# Mostra a nuvem de palavras
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

"""# 8. Gerar nuvem de palavras por nota da avaliação"""

#Cria um novo dataframe contendo apenas os registros com nota da avaliação igual a 1.
df_rate = df[df['overall_rating']==1]

#Extrai somente o campo do título das avaliações
texts_rate = df_rate['review_title']

#Agrupa textos considerando campos nulos
full_text_rate = " ".join([str(text) if text is not None else "" for text in texts_rate])

# Gera wordcloud

# Mostra a nuvem de palavras

"""# 9. Calcular a idade"""

#Converter as informações do submission_date que está string para datetime e gravar no campo "submission_data_1"
df['submission_date_1'] = pd.to_datetime(df['submission_date'],errors='coerce')
# Extrair o ano da submissão do novo campo e salvar no campo submission_year
df['submission_year'] = df['submission_date_1'].dt.year

#Cria campo idade e calcula a idade de cada revisor
df['idade'] = df['submission_year'] - df['reviewer_birth_year']

#Visualiza dataframe